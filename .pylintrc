[MAIN]
py-version = 3.10
persistent = false
load-plugins=
    pylint.extensions.code_style,
    pylint.extensions.typing,
    pylint_pydantic,
fail-on = I
extension-pkg-whitelist=pydantic

[BASIC]
class-const-naming-style=any
good-names=c,f,i,iv,j,k,v,p,r,ex,Run,_,pk,db,x,y

[MESSAGES CONTROL]
# Reasons disabled:
# format - handled by black
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# unused-argument - generic callbacks and setup methods create a lot of warnings
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# too-many-ancestors - it's too strict.
# wrong-import-order - isort guards this
# consider-using-f-string - str.format sometimes more readable
# ---
# Pylint CodeStyle plugin
# consider-using-namedtuple-or-dataclass - too opinionated
# consider-using-assignment-expr - decision to use := better left to devs

disable=
    format,
    abstract-method,
    cyclic-import,
    duplicate-code,
    inconsistent-return-statements,
    locally-disabled,
    not-context-manager,
    too-few-public-methods,
    too-many-ancestors,
    too-many-arguments,
    too-many-branches,
    too-many-instance-attributes,
    too-many-lines,
    too-many-locals,
    too-many-public-methods,
    too-many-return-statements,
    too-many-statements,
    too-many-boolean-expressions,
    unused-argument,
    consider-using-f-string,
    consider-using-namedtuple-or-dataclass,
    consider-using-assignment-expr,
    consider-using-dict-items,
    missing-docstring,
    empty-docstring,

enable=
    use-symbolic-message-instead,


[EXCEPTIONS]
overgeneral-exceptions=Exception


[TYPECHECK]
ignored-modules = distutils

[FORMAT]
expected-line-ending-format = LF
